{"version":3,"sources":["supportedLanguages.js","Editor.js","SpeechToTextDemo.js","reportWebVitals.js","index.js"],"names":["EditorWithCode","props","codeText","useState","code","setCode","useEffect","height","language","onChange","newValue","e","console","log","value","options","selectOnLineNumbers","roundedSelection","readOnly","cursorStyle","automaticLayout","theme","scrollbar","useShadows","verticalHasArrows","horizontalHasArrows","vertical","horizontal","verticalScrollbarSize","horizontalScrollbarSize","arrowSize","myHeaders","Headers","postData","url","data","a","fetch","method","headers","body","JSON","stringify","response","json","append","SpeechToTextDemo","state","error","interimText","finalisedText","listening","inputRef","React","createRef","onAnythingSaid","text","setState","onEndEvent","isWidthUp","width","startListening","onFinalised","responseObj","str","then","html","undefined","formatter","render","listener","SpeechToText","err","stopListening","content","buttonForListening","this","classes","Paper","className","paper","Typography","variant","gutterBottom","Button","color","onClick","Grid","container","spacing","item","xs","md","lg","FormControl","formControl","InputLabel","Select","evt","target","disabled","supportedLanguages","map","MenuItem","FormHelperText","href","downloadCode","download","style","marginBottom","minHeight","minWidth","padding","Input","marginLeft","current","sm","xl","my","marginY","pr","marginRight","Editor","ml","Table","table","TableHead","TableRow","TableCell","TableBody","index","component","scope","AppBar","position","Toolbar","grow","justifyContent","root","Component","withWidth","withStyles","paddingTop","paddingLeft","paddingRight","flex","flexGrow","mixins","gutters","paddingBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed1ef64f.chunk.js","sourcesContent":["export default [\r\n  [\"English (United States)\", \"en-US\"],\r\n  [\"English (India)\", \"en-IN\"],\r\n  [\"Русский (Россия)\", \"ru-RU\"],\r\n  [\"Українська (Україна)\", \"uk-UA\"],\r\n];\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MonacoEditor from \"@uiw/react-monacoeditor\";\r\n\r\nfunction EditorWithCode(props) {\r\n  const { codeText } = props;\r\n  const [code, setCode] = useState(codeText);\r\n\r\n  useEffect(() => {\r\n    setCode(codeText);\r\n  }, [codeText]);\r\n\r\n  const options = {\r\n    selectOnLineNumbers: true,\r\n    roundedSelection: false,\r\n    readOnly: false,\r\n    cursorStyle: \"line\",\r\n    automaticLayout: false,\r\n    theme: \"vs-dark\",\r\n    scrollbar: {\r\n      // Subtle shadows to the left & top. Defaults to true.\r\n      useShadows: false,\r\n      // Render vertical arrows. Defaults to false.\r\n      verticalHasArrows: true,\r\n      // Render horizontal arrows. Defaults to false.\r\n      horizontalHasArrows: true,\r\n      // Render vertical scrollbar.\r\n      // Accepted values: 'auto', 'visible', 'hidden'.\r\n      // Defaults to 'auto'\r\n      vertical: \"auto\",\r\n      // Render horizontal scrollbar.\r\n      // Accepted values: 'auto', 'visible', 'hidden'.\r\n      // Defaults to 'auto'\r\n      horizontal: \"auto\",\r\n      verticalScrollbarSize: 17,\r\n      horizontalScrollbarSize: 17,\r\n      arrowSize: 30,\r\n    },\r\n  };\r\n  //   editorDidMount(editor, monaco) {\r\n  //     console.log(\"editorDidMount\", editor, monaco);\r\n  //     editor.focus();\r\n  //   }\r\n  const onChange = (newValue, e) => {\r\n    console.log(\"onChange\", newValue, e);\r\n  };\r\n\r\n  return (\r\n    <MonacoEditor\r\n      height=\"1000px\"\r\n      language=\"html\"\r\n      onChange={onChange}\r\n      value={code}\r\n      options={options}\r\n    />\r\n  );\r\n}\r\n\r\nexport default EditorWithCode;\r\n","import React, { Component, useRef } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Paper,\r\n  Button,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Grid,\r\n  AppBar,\r\n  Toolbar,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Input,\r\n} from \"@material-ui/core\";\r\nimport withWidth, { isWidthUp } from \"@material-ui/core/withWidth\";\r\nimport SpeechToText from \"speech-to-text\";\r\n\r\nimport supportedLanguages from \"./supportedLanguages\";\r\n\r\nimport EditorWithCode from \"./Editor\";\r\nimport formatter from \"html-formatter\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    paddingTop: 65,\r\n    paddingLeft: 11,\r\n    paddingRight: 11,\r\n  },\r\n  flex: {\r\n    flex: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: theme.mixins.gutters({\r\n    paddingTop: 22,\r\n    paddingBottom: 22,\r\n    spacing: 8,\r\n  }),\r\n});\r\n\r\nconst myHeaders = new Headers();\r\nmyHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\nasync function postData(url, data) {\r\n  console.log(data);\r\n  const response = await fetch(url, {\r\n    method: \"Post\",\r\n    headers: myHeaders,\r\n    body: JSON.stringify(data),\r\n  });\r\n  return await response.json();\r\n}\r\n\r\nasync function downloadCode() {\r\n  const url =\r\n    \"https://qoder-ai-server.herokuapp.com/api/commands/download-html\";\r\n  const response = await fetch(url, {\r\n    method: \"GET\",\r\n  });\r\n  return await response;\r\n}\r\n\r\nclass SpeechToTextDemo extends Component {\r\n  state = {\r\n    error: \"\",\r\n    interimText: \"\",\r\n    finalisedText: [],\r\n    listening: false,\r\n    language: \"en-US\",\r\n    code: \"\",\r\n  };\r\n\r\n  inputRef = React.createRef();\r\n\r\n  onAnythingSaid = (text) => {\r\n    this.setState({ interimText: text });\r\n  };\r\n\r\n  onEndEvent = () => {\r\n    if (!isWidthUp(\"sm\", this.props.width)) {\r\n      this.setState({ listening: false });\r\n    } else if (this.state.listening) {\r\n      this.startListening();\r\n    }\r\n  };\r\n\r\n  onFinalised = (text) => {\r\n    let responseObj = {};\r\n    this.setState({\r\n      finalisedText: [text, ...this.state.finalisedText],\r\n      interimText: \"\",\r\n    });\r\n    console.log(this.state.finalisedText[0]);\r\n    let response = postData(\r\n      \"https://qoder-ai-server.herokuapp.com/api/commands/get-html\",\r\n      {\r\n        str: this.state.finalisedText[0],\r\n      }\r\n    );\r\n    console.log(response);\r\n    response.then((value) => {\r\n      responseObj = value;\r\n      console.log(responseObj.html);\r\n      if (responseObj.html === undefined);\r\n      else {\r\n        this.setState({\r\n          code: formatter.render(responseObj.html),\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  startListening = () => {\r\n    try {\r\n      this.listener = new SpeechToText(\r\n        this.onFinalised,\r\n        this.onEndEvent,\r\n        this.onAnythingSaid,\r\n        this.state.language\r\n      );\r\n      this.listener.startListening();\r\n      this.setState({ listening: true });\r\n    } catch (err) {}\r\n  };\r\n\r\n  stopListening = () => {\r\n    this.listener.stopListening();\r\n    this.setState({ listening: false });\r\n  };\r\n\r\n  render() {\r\n    const { error, interimText, finalisedText, listening, language } =\r\n      this.state;\r\n    const { classes } = this.props;\r\n    let content;\r\n    if (error) {\r\n      content = (\r\n        <Paper className={classes.paper}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {error}\r\n          </Typography>\r\n        </Paper>\r\n      );\r\n    } else {\r\n      let buttonForListening;\r\n\r\n      if (listening) {\r\n        buttonForListening = (\r\n          <Button color=\"primary\" onClick={() => this.stopListening()}>\r\n            Stop Listening\r\n          </Button>\r\n        );\r\n      } else {\r\n        buttonForListening = (\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={() => this.startListening()}\r\n            variant=\"contained\"\r\n          >\r\n            Start Listening\r\n          </Button>\r\n        );\r\n      }\r\n\r\n      content = (\r\n        <Grid container spacing={8}>\r\n          <Grid item xs={12} md={7}>\r\n            <Paper className={this.props.classes.paper}>\r\n              <Grid container spacing={8}>\r\n                <Grid item xs={12} lg={6}>\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Status: {listening ? \"listening...\" : \"finished listening\"}\r\n                  </Typography>\r\n                  {buttonForListening}\r\n                </Grid>\r\n                <Grid item xs={12} lg={6}>\r\n                  <FormControl className={classes.formControl}>\r\n                    <InputLabel>Language</InputLabel>\r\n                    <Select\r\n                      value={language}\r\n                      onChange={(evt) =>\r\n                        this.setState({ language: evt.target.value })\r\n                      }\r\n                      disabled={listening}\r\n                    >\r\n                      {supportedLanguages.map((language) => (\r\n                        <MenuItem key={language[1]} value={language[1]}>\r\n                          {language[0]}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    <FormHelperText>\r\n                      What language are you going to speak in?\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={5}>\r\n            <Paper className={this.props.classes.paper}>\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                Current utterances\r\n              </Typography>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                {interimText}\r\n              </Typography>\r\n            </Paper>\r\n\r\n            <Button\r\n              href=\"https://qoder-ai-server.herokuapp.com/api/commands/download-html\"\r\n              color=\"primary\"\r\n              onClick={() => downloadCode()}\r\n              target=\"_blanc\"\r\n              download\r\n            >\r\n              Download Code\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"body1\" gutterBottom>\r\n              Manual input\r\n            </Typography>\r\n            <Grid container>\r\n              <Paper\r\n                style={{\r\n                  marginBottom: \"50px\",\r\n                  minHeight: \"50px\",\r\n                  minWidth: \"100px\",\r\n                  padding: \"25px\",\r\n                }}\r\n              >\r\n                <Input inputRef={this.inputRef}></Input>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginLeft: \"5px\" }}\r\n                  onClick={() => {\r\n                    let responseObj = {};\r\n                    let response = postData(\r\n                      \"https://qoder-ai-server.herokuapp.com/api/commands/get-html\",\r\n                      {\r\n                        str: this.inputRef.current.value,\r\n                      }\r\n                    );\r\n                    console.log(response);\r\n                    response.then((value) => {\r\n                      responseObj = value;\r\n                      console.log(responseObj.html);\r\n                      if (responseObj.html === undefined);\r\n                      else {\r\n                        this.setState({\r\n                          code: formatter.render(responseObj.html),\r\n                        });\r\n                      }\r\n                    });\r\n                  }}\r\n                >\r\n                  Input\r\n                </Button>\r\n              </Paper>\r\n            </Grid>\r\n            <Paper className={classes.paper}>\r\n              <Grid container>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  sm={12}\r\n                  xl={8}\r\n                  my={100}\r\n                  marginY={100}\r\n                  pr={10}\r\n                  style={{ marginRight: \"25px\" }}\r\n                >\r\n                  <EditorWithCode\r\n                    codeText={this.state.code}\r\n                    style={{ height: \"100%\" }}\r\n                  />\r\n                </Grid>\r\n                <Grid item sm={12} xl={3} ml={25}>\r\n                  <Table className={classes.table}>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>\r\n                          <Typography variant=\"h6\">Finalised Text</Typography>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {finalisedText.map((str, index) => {\r\n                        return (\r\n                          <TableRow key={index}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                              {str}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                    </TableBody>\r\n                  </Table>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Grid container>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.grow} color=\"inherit\">\r\n              Fractal AI-SERVER-QODER\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Grid container justifyContent=\"center\" className={classes.root}>\r\n          <Grid item xs={12} sm={8}>\r\n            <Grid container>\r\n              <Grid item xs={12}></Grid>\r\n            </Grid>\r\n            {content}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withWidth()(withStyles(styles)(SpeechToTextDemo));\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport SpeechToTextDemo from \"./SpeechToTextDemo\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SpeechToTextDemo></SpeechToTextDemo>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}